package com.example.swy.wy_map.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.swy.wy_map.entity.MyLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_LOCATION".
*/
public class MyLocationDao extends AbstractDao<MyLocation, Long> {

    public static final String TABLENAME = "MY_LOCATION";

    /**
     * Properties of entity MyLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocationId = new Property(0, Long.class, "locationId", true, "_id");
        public final static Property PointTime = new Property(1, java.util.Date.class, "pointTime", false, "POINT_TIME");
        public final static Property RouteId = new Property(2, Long.class, "routeId", false, "ROUTE_ID");
        public final static Property PictureId = new Property(3, String.class, "pictureId", false, "PICTURE_ID");
        public final static Property Note = new Property(4, String.class, "note", false, "NOTE");
        public final static Property LocationType = new Property(5, int.class, "LocationType", false, "LOCATION_TYPE");
        public final static Property Latitude = new Property(6, double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Altitude = new Property(8, double.class, "Altitude", false, "ALTITUDE");
        public final static Property Accuracy = new Property(9, float.class, "Accuracy", false, "ACCURACY");
        public final static Property Address = new Property(10, String.class, "Address", false, "ADDRESS");
        public final static Property Country = new Property(11, String.class, "Country", false, "COUNTRY");
        public final static Property Province = new Property(12, String.class, "Province", false, "PROVINCE");
        public final static Property City = new Property(13, String.class, "City", false, "CITY");
        public final static Property District = new Property(14, String.class, "District", false, "DISTRICT");
        public final static Property Street = new Property(15, String.class, "Street", false, "STREET");
        public final static Property StreetNum = new Property(16, String.class, "StreetNum", false, "STREET_NUM");
        public final static Property CityCode = new Property(17, String.class, "CityCode", false, "CITY_CODE");
        public final static Property AdCode = new Property(18, String.class, "AdCode", false, "AD_CODE");
        public final static Property AoiName = new Property(19, String.class, "AoiName", false, "AOI_NAME");
        public final static Property BuildingId = new Property(20, String.class, "BuildingId", false, "BUILDING_ID");
        public final static Property GpsAccuracyStatus = new Property(21, int.class, "GpsAccuracyStatus", false, "GPS_ACCURACY_STATUS");
    }

    private Query<MyLocation> route_LocationListQuery;

    public MyLocationDao(DaoConfig config) {
        super(config);
    }
    
    public MyLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: locationId
                "\"POINT_TIME\" INTEGER," + // 1: pointTime
                "\"ROUTE_ID\" INTEGER," + // 2: routeId
                "\"PICTURE_ID\" TEXT," + // 3: pictureId
                "\"NOTE\" TEXT," + // 4: note
                "\"LOCATION_TYPE\" INTEGER NOT NULL ," + // 5: LocationType
                "\"LATITUDE\" REAL NOT NULL ," + // 6: Latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 7: Longitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 8: Altitude
                "\"ACCURACY\" REAL NOT NULL ," + // 9: Accuracy
                "\"ADDRESS\" TEXT," + // 10: Address
                "\"COUNTRY\" TEXT," + // 11: Country
                "\"PROVINCE\" TEXT," + // 12: Province
                "\"CITY\" TEXT," + // 13: City
                "\"DISTRICT\" TEXT," + // 14: District
                "\"STREET\" TEXT," + // 15: Street
                "\"STREET_NUM\" TEXT," + // 16: StreetNum
                "\"CITY_CODE\" TEXT," + // 17: CityCode
                "\"AD_CODE\" TEXT," + // 18: AdCode
                "\"AOI_NAME\" TEXT," + // 19: AoiName
                "\"BUILDING_ID\" TEXT," + // 20: BuildingId
                "\"GPS_ACCURACY_STATUS\" INTEGER NOT NULL );"); // 21: GpsAccuracyStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_LOCATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyLocation entity) {
        stmt.clearBindings();
 
        Long locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindLong(1, locationId);
        }
 
        java.util.Date pointTime = entity.getPointTime();
        if (pointTime != null) {
            stmt.bindLong(2, pointTime.getTime());
        }
 
        Long routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(3, routeId);
        }
 
        String pictureId = entity.getPictureId();
        if (pictureId != null) {
            stmt.bindString(4, pictureId);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
        stmt.bindLong(6, entity.getLocationType());
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindDouble(9, entity.getAltitude());
        stmt.bindDouble(10, entity.getAccuracy());
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(11, Address);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(12, Country);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(13, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(14, City);
        }
 
        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(15, District);
        }
 
        String Street = entity.getStreet();
        if (Street != null) {
            stmt.bindString(16, Street);
        }
 
        String StreetNum = entity.getStreetNum();
        if (StreetNum != null) {
            stmt.bindString(17, StreetNum);
        }
 
        String CityCode = entity.getCityCode();
        if (CityCode != null) {
            stmt.bindString(18, CityCode);
        }
 
        String AdCode = entity.getAdCode();
        if (AdCode != null) {
            stmt.bindString(19, AdCode);
        }
 
        String AoiName = entity.getAoiName();
        if (AoiName != null) {
            stmt.bindString(20, AoiName);
        }
 
        String BuildingId = entity.getBuildingId();
        if (BuildingId != null) {
            stmt.bindString(21, BuildingId);
        }
        stmt.bindLong(22, entity.getGpsAccuracyStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyLocation entity) {
        stmt.clearBindings();
 
        Long locationId = entity.getLocationId();
        if (locationId != null) {
            stmt.bindLong(1, locationId);
        }
 
        java.util.Date pointTime = entity.getPointTime();
        if (pointTime != null) {
            stmt.bindLong(2, pointTime.getTime());
        }
 
        Long routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindLong(3, routeId);
        }
 
        String pictureId = entity.getPictureId();
        if (pictureId != null) {
            stmt.bindString(4, pictureId);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(5, note);
        }
        stmt.bindLong(6, entity.getLocationType());
        stmt.bindDouble(7, entity.getLatitude());
        stmt.bindDouble(8, entity.getLongitude());
        stmt.bindDouble(9, entity.getAltitude());
        stmt.bindDouble(10, entity.getAccuracy());
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(11, Address);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(12, Country);
        }
 
        String Province = entity.getProvince();
        if (Province != null) {
            stmt.bindString(13, Province);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(14, City);
        }
 
        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(15, District);
        }
 
        String Street = entity.getStreet();
        if (Street != null) {
            stmt.bindString(16, Street);
        }
 
        String StreetNum = entity.getStreetNum();
        if (StreetNum != null) {
            stmt.bindString(17, StreetNum);
        }
 
        String CityCode = entity.getCityCode();
        if (CityCode != null) {
            stmt.bindString(18, CityCode);
        }
 
        String AdCode = entity.getAdCode();
        if (AdCode != null) {
            stmt.bindString(19, AdCode);
        }
 
        String AoiName = entity.getAoiName();
        if (AoiName != null) {
            stmt.bindString(20, AoiName);
        }
 
        String BuildingId = entity.getBuildingId();
        if (BuildingId != null) {
            stmt.bindString(21, BuildingId);
        }
        stmt.bindLong(22, entity.getGpsAccuracyStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyLocation readEntity(Cursor cursor, int offset) {
        MyLocation entity = new MyLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // locationId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // pointTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // routeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pictureId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // note
            cursor.getInt(offset + 5), // LocationType
            cursor.getDouble(offset + 6), // Latitude
            cursor.getDouble(offset + 7), // Longitude
            cursor.getDouble(offset + 8), // Altitude
            cursor.getFloat(offset + 9), // Accuracy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Address
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Country
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Province
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // City
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // District
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Street
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // StreetNum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // CityCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // AdCode
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // AoiName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // BuildingId
            cursor.getInt(offset + 21) // GpsAccuracyStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyLocation entity, int offset) {
        entity.setLocationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPointTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setRouteId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPictureId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocationType(cursor.getInt(offset + 5));
        entity.setLatitude(cursor.getDouble(offset + 6));
        entity.setLongitude(cursor.getDouble(offset + 7));
        entity.setAltitude(cursor.getDouble(offset + 8));
        entity.setAccuracy(cursor.getFloat(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCountry(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProvince(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDistrict(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStreet(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStreetNum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCityCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAdCode(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAoiName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBuildingId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setGpsAccuracyStatus(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyLocation entity, long rowId) {
        entity.setLocationId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyLocation entity) {
        if(entity != null) {
            return entity.getLocationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyLocation entity) {
        return entity.getLocationId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "locationList" to-many relationship of Route. */
    public List<MyLocation> _queryRoute_LocationList(Long routeId) {
        synchronized (this) {
            if (route_LocationListQuery == null) {
                QueryBuilder<MyLocation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RouteId.eq(null));
                queryBuilder.orderRaw("T.'POINT_TIME' ASC");
                route_LocationListQuery = queryBuilder.build();
            }
        }
        Query<MyLocation> query = route_LocationListQuery.forCurrentThread();
        query.setParameter(0, routeId);
        return query.list();
    }

}
